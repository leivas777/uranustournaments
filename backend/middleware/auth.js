// backend/middleware/auth.js (usando sua configura√ß√£o Firebase)
const firebaseConfig = require('../config/firebase');
const jwtService = require('../services/jwtService');
const userService = require('../services/userService');
const roleService = require('../services/roleService');

class AuthMiddleware {
  // Middleware principal de autentica√ß√£o
  async authenticate(req, res, next) {
    try {
      const authHeader = req.headers.authorization;
      
      if (!authHeader) {
        return res.status(401).json({
          success: false,
          error: 'Token de autentica√ß√£o n√£o fornecido',
          code: 'NO_TOKEN'
        });
      }

      const token = jwtService.extractTokenFromHeader(authHeader);
      
      if (!token) {
        return res.status(401).json({
          success: false,
          error: 'Formato de token inv√°lido',
          code: 'INVALID_TOKEN_FORMAT'
        });
      }

      let user;
      let authMethod = 'unknown';

      // Verificar se Firebase est√° configurado e tentar autentica√ß√£o Firebase primeiro
      if (firebaseConfig.isFirebaseConfigured()) {
        console.log('üî• Tentando autentica√ß√£o Firebase...');
        const firebaseResult = await firebaseConfig.verifyFirebaseToken(token);
        
        if (firebaseResult.success) {
          console.log('‚úÖ Autentica√ß√£o Firebase bem-sucedida');
          user = await userService.createOrUpdateFromFirebase(firebaseResult.user);
          authMethod = 'firebase';
        } else {
          console.log('‚ùå Falha na autentica√ß√£o Firebase:', firebaseResult.error);
        }
      }

      // Se Firebase falhou ou n√£o est√° configurado, tentar JWT local
      if (!user) {
        console.log('üîë Tentando autentica√ß√£o JWT local...');
        try {
          const decoded = jwtService.verifyToken(token);
          user = await userService.getUserById(decoded.userId);
          authMethod = 'jwt';
          
          if (!user) {
            return res.status(401).json({
              success: false,
              error: 'Usu√°rio n√£o encontrado',
              code: 'USER_NOT_FOUND'
            });
          }
          
          console.log('‚úÖ Autentica√ß√£o JWT bem-sucedida');
        } catch (jwtError) {
          console.log('‚ùå Falha na autentica√ß√£o JWT:', jwtError.message);
          return res.status(401).json({
            success: false,
            error: 'Token inv√°lido ou expirado',
            code: 'INVALID_TOKEN',
            details: jwtError.message
          });
        }
      }

      // Verificar se usu√°rio est√° ativo
      if (!user.is_active) {
        return res.status(401).json({
          success: false,
          error: 'Usu√°rio desativado',
          code: 'USER_INACTIVE'
        });
      }

      // Buscar roles e permiss√µes do usu√°rio
      const userWithRoles = await userService.getUserWithRoles(user.id);
      
      // Adicionar informa√ß√µes do usu√°rio ao request
      req.user = userWithRoles;
      req.userId = user.id;
      req.authMethod = authMethod;
      
      console.log(`‚úÖ Usu√°rio autenticado via ${authMethod}: ${user.email} (ID: ${user.id})`);
      
      // Atualizar √∫ltimo login
      await userService.updateLastLogin(user.id);
      
      next();

    } catch (error) {
      console.error('‚ùå Erro no middleware de autentica√ß√£o:', error);
      return res.status(500).json({
        success: false,
        error: 'Erro interno de autentica√ß√£o',
        code: 'AUTH_ERROR'
      });
    }
  }

  // Middleware para verificar permiss√µes espec√≠ficas
  requirePermission(permissionName) {
    return async (req, res, next) => {
      try {
        if (!req.user) {
          return res.status(401).json({
            success: false,
            error: 'Usu√°rio n√£o autenticado',
            code: 'NOT_AUTHENTICATED'
          });
        }

        // Verificar se √© Master Admin (tem todas as permiss√µes)
        const isMaster = await roleService.isMasterAdmin(req.user.id);
        if (isMaster) {
          console.log('üëë Master Admin - permiss√£o concedida automaticamente');
          return next();
        }

        // Verificar permiss√£o espec√≠fica
        const hasPermission = req.user.permissions.includes(permissionName);
        
        if (!hasPermission) {
          console.log(`‚ùå Permiss√£o negada: ${permissionName} para usu√°rio ${req.user.email}`);
          return res.status(403).json({
            success: false,
            error: 'Permiss√£o insuficiente',
            code: 'INSUFFICIENT_PERMISSION',
            required_permission: permissionName,
            user_permissions: req.user.permissions
          });
        }

        console.log(`‚úÖ Permiss√£o concedida: ${permissionName} para usu√°rio ${req.user.email}`);
        next();

      } catch (error) {
        console.error('‚ùå Erro ao verificar permiss√£o:', error);
        return res.status(500).json({
          success: false,
          error: 'Erro ao verificar permiss√µes',
          code: 'PERMISSION_CHECK_ERROR'
        });
      }
    };
  }

  // Middleware para verificar se usu√°rio pertence a um cliente espec√≠fico
  requireClientAccess(clientIdParam = 'clientId') {
    return async (req, res, next) => {
      try {
        if (!req.user) {
          return res.status(401).json({
            success: false,
            error: 'Usu√°rio n√£o autenticado',
            code: 'NOT_AUTHENTICATED'
          });
        }

        const clientId = req.params[clientIdParam] || req.body.clientId || req.query.clientId;
        
        if (!clientId) {
          return res.status(400).json({
            success: false,
            error: 'ID do cliente n√£o fornecido',
            code: 'CLIENT_ID_REQUIRED'
          });
        }

        // Verificar se √© Master Admin
        const isMaster = await roleService.isMasterAdmin(req.user.id);
        if (isMaster) {
          console.log('üëë Master Admin - acesso ao cliente concedido');
          req.clientId = parseInt(clientId);
          return next();
        }

        // Verificar se usu√°rio tem acesso ao cliente
        const userRoles = await roleService.getUserRoles(req.user.id, clientId);
        
        if (userRoles.length === 0) {
          console.log(`‚ùå Acesso negado ao cliente ${clientId} para usu√°rio ${req.user.email}`);
          return res.status(403).json({
            success: false,
            error: 'Acesso negado ao cliente',
            code: 'CLIENT_ACCESS_DENIED',
            client_id: clientId
          });
        }

        console.log(`‚úÖ Acesso ao cliente ${clientId} concedido para usu√°rio ${req.user.email}`);
        req.clientId = parseInt(clientId);
        next();

      } catch (error) {
        console.error('‚ùå Erro ao verificar acesso ao cliente:', error);
        return res.status(500).json({
          success: false,
          error: 'Erro ao verificar acesso ao cliente',
          code: 'CLIENT_ACCESS_ERROR'
        });
      }
    };
  }

  // Middleware opcional (n√£o falha se n√£o autenticado)
  optionalAuth(req, res, next) {
    const authHeader = req.headers.authorization;
    
    if (!authHeader) {
      console.log('‚ö†Ô∏è Nenhum token fornecido - continuando sem autentica√ß√£o');
      return next();
    }

    // Tentar autenticar, mas n√£o falhar se n√£o conseguir
    this.authenticate(req, res, (error) => {
      if (error) {
        console.log('‚ö†Ô∏è Autentica√ß√£o opcional falhou, continuando sem usu√°rio');
      }
      next();
    });
  }

  // Middleware para verificar se √© Master Admin
  requireMasterAdmin(req, res, next) {
    return this.requirePermission('system.admin')(req, res, next);
  }

  // Middleware para verificar m√∫ltiplas permiss√µes (OR)
  requireAnyPermission(permissions) {
    return async (req, res, next) => {
      try {
        if (!req.user) {
          return res.status(401).json({
            success: false,
            error: 'Usu√°rio n√£o autenticado',
            code: 'NOT_AUTHENTICATED'
          });
        }

        // Verificar se √© Master Admin
        const isMaster = await roleService.isMasterAdmin(req.user.id);
        if (isMaster) {
          return next();
        }

        // Verificar se tem pelo menos uma das permiss√µes
        const hasAnyPermission = permissions.some(permission => 
          req.user.permissions.includes(permission)
        );

        if (!hasAnyPermission) {
          return res.status(403).json({
            success: false,
            error: 'Permiss√£o insuficiente',
            code: 'INSUFFICIENT_PERMISSION',
            required_permissions: permissions,
            user_permissions: req.user.permissions
          });
        }

        next();

      } catch (error) {
        console.error('‚ùå Erro ao verificar permiss√µes:', error);
        return res.status(500).json({
          success: false,
          error: 'Erro ao verificar permiss√µes',
          code: 'PERMISSION_CHECK_ERROR'
        });
      }
    };
  }
}

module.exports = new AuthMiddleware();